// Code generated by protoc-gen-go. DO NOT EDIT.
// source: wallet/tx.proto

package wallet

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"
import common "github.com/arxanchain/sdk-go-common/protos/common"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ColorType int32

const (
	ColorType_Undefined ColorType = 0
	ColorType_CTOKEN    ColorType = 1
	ColorType_CASSET    ColorType = 2
)

var ColorType_name = map[int32]string{
	0: "Undefined",
	1: "CTOKEN",
	2: "CASSET",
}
var ColorType_value = map[string]int32{
	"Undefined": 0,
	"CTOKEN":    1,
	"CASSET":    2,
}

func (x ColorType) String() string {
	return proto.EnumName(ColorType_name, int32(x))
}
func (ColorType) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

type TxType int32

const (
	// Issue ColoredToken
	TxType_ISSUE TxType = 0
	// Transfer ColoredToken
	TxType_NORMAL TxType = 1
	// Redeem ColoredToken
	// 贴现
	TxType_REDEEM TxType = 2
	// Revoke ColoredToken
	// 回收
	TxType_REVOKE TxType = 3
	// ROLLBACK transaction
	TxType_ROLLBACK TxType = 4
	// interest transaction
	TxType_INTEREST TxType = 5
	// fee transaction
	TxType_FEE TxType = 6
	// Reverse a transaction
	// 平账操作
	TxType_REVERSE TxType = 7
)

var TxType_name = map[int32]string{
	0: "ISSUE",
	1: "NORMAL",
	2: "REDEEM",
	3: "REVOKE",
	4: "ROLLBACK",
	5: "INTEREST",
	6: "FEE",
	7: "REVERSE",
}
var TxType_value = map[string]int32{
	"ISSUE":    0,
	"NORMAL":   1,
	"REDEEM":   2,
	"REVOKE":   3,
	"ROLLBACK": 4,
	"INTEREST": 5,
	"FEE":      6,
	"REVERSE":  7,
}

func (x TxType) String() string {
	return proto.EnumName(TxType_name, int32(x))
}
func (TxType) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

// txin not specified who has this txin, because creator can use their txout only,
// txin must be creator's previous txout
type TxIN struct {
	// previous output index
	Ix         uint32 `protobuf:"varint,1,opt,name=ix" json:"ix,omitempty"`
	SourceHash []byte `protobuf:"bytes,2,opt,name=sourceHash,proto3" json:"sourceHash,omitempty"`
	Script     []byte `protobuf:"bytes,3,opt,name=script,proto3" json:"script,omitempty"`
	Sequence   uint32 `protobuf:"varint,4,opt,name=sequence" json:"sequence,omitempty"`
}

func (m *TxIN) Reset()                    { *m = TxIN{} }
func (m *TxIN) String() string            { return proto.CompactTextString(m) }
func (*TxIN) ProtoMessage()               {}
func (*TxIN) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *TxIN) GetIx() uint32 {
	if m != nil {
		return m.Ix
	}
	return 0
}

func (m *TxIN) GetSourceHash() []byte {
	if m != nil {
		return m.SourceHash
	}
	return nil
}

func (m *TxIN) GetScript() []byte {
	if m != nil {
		return m.Script
	}
	return nil
}

func (m *TxIN) GetSequence() uint32 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

// tx out
type TxOUT struct {
	// ColoredToken ID
	CTokenId string `protobuf:"bytes,1,opt,name=cTokenId" json:"cTokenId,omitempty"`
	// ColorType
	CType ColorType `protobuf:"varint,2,opt,name=cType,enum=wallet.ColorType" json:"cType,omitempty"`
	// coin amount
	Value int64 `protobuf:"varint,3,opt,name=value" json:"value,omitempty"`
	// who will receive this txout
	Addr string `protobuf:"bytes,4,opt,name=addr" json:"addr,omitempty"`
	// until xx timestamp, any one cant spend the txout
	// -1 means no check
	Until int64 `protobuf:"varint,5,opt,name=until" json:"until,omitempty"`
	// script
	Script []byte `protobuf:"bytes,6,opt,name=script,proto3" json:"script,omitempty"`
}

func (m *TxOUT) Reset()                    { *m = TxOUT{} }
func (m *TxOUT) String() string            { return proto.CompactTextString(m) }
func (*TxOUT) ProtoMessage()               {}
func (*TxOUT) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *TxOUT) GetCTokenId() string {
	if m != nil {
		return m.CTokenId
	}
	return ""
}

func (m *TxOUT) GetCType() ColorType {
	if m != nil {
		return m.CType
	}
	return ColorType_Undefined
}

func (m *TxOUT) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *TxOUT) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *TxOUT) GetUntil() int64 {
	if m != nil {
		return m.Until
	}
	return 0
}

func (m *TxOUT) GetScript() []byte {
	if m != nil {
		return m.Script
	}
	return nil
}

// UTXO
type UTXO struct {
	// SourceTxDataHash the Bitcoin hash (double sha256) of
	// the given transaction
	// @inject_tag: gorm:"type:varchar(128);primary_key"
	SourceTxDataHash string `protobuf:"bytes,1,opt,name=sourceTxDataHash" json:"sourceTxDataHash,omitempty" gorm:"type:varchar(128);primary_key"`
	// Ix index of output array in the transaction
	// @inject_tag: gorm:"type:varchar(8);primary_key"
	// TODO: when using uint32 type and ix is 0 can not save to db
	// so using string temporarily, will use uint32 type instead next version
	Ix string `protobuf:"bytes,2,opt,name=ix" json:"ix,omitempty" gorm:"type:varchar(8);primary_key"`
	// ColoredToken ID
	// @inject_tag: gorm:"type:varchar(128)"
	CTokenId string `protobuf:"bytes,3,opt,name=cTokenId" json:"cTokenId,omitempty" gorm:"type:varchar(128)"`
	// ColorType
	CType ColorType `protobuf:"varint,4,opt,name=cType,enum=wallet.ColorType" json:"cType,omitempty"`
	// coin amount
	Value int64 `protobuf:"varint,5,opt,name=value" json:"value,omitempty"`
	// who will receive this txout
	// @inject_tag: gorm:"type:varchar(64);index"
	Addr string `protobuf:"bytes,6,opt,name=addr" json:"addr,omitempty" gorm:"type:varchar(64);index"`
	// until xx timestamp, any one cant spend the txout
	// -1 means no check
	Until int64 `protobuf:"varint,7,opt,name=until" json:"until,omitempty"`
	// script
	Script []byte `protobuf:"bytes,8,opt,name=script,proto3" json:"script,omitempty"`
	// CreatedAt
	// @inject_tag: gorm:"type:varchar(64)"
	CreatedAt *common.TimestampWrapper `protobuf:"bytes,9,opt,name=createdAt" json:"createdAt,omitempty" gorm:"type:varchar(64)"`
	// nanoseconds of timestamp
	CreatedAtNanos int32 `protobuf:"varint,10,opt,name=createdAtNanos" json:"createdAtNanos,omitempty"`
	// SpentTxDataHash
	// @inject_tag: gorm:"type:varchar(128)"
	SpentTxDataHash string `protobuf:"bytes,11,opt,name=spentTxDataHash" json:"spentTxDataHash,omitempty" gorm:"type:varchar(128)"`
	// SpentAt ...
	// @inject_tag: gorm:"type:varchar(64)"
	SpentAt *common.TimestampWrapper `protobuf:"bytes,12,opt,name=spentAt" json:"spentAt,omitempty" gorm:"type:varchar(64)"`
	// nanoseconds of timestamp
	SpentAtNanos int32 `protobuf:"varint,13,opt,name=spentAtNanos" json:"spentAtNanos,omitempty"`
	// Founder who created this tx
	// @inject_tag: gorm:"type:varchar(64);index"
	Founder string `protobuf:"bytes,14,opt,name=founder" json:"founder,omitempty" gorm:"type:varchar(64);index"`
	TxType  TxType `protobuf:"varint,15,opt,name=txType,enum=wallet.TxType" json:"txType,omitempty"`
	// BcTxId blockchain transaction id
	BcTxId string `protobuf:"bytes,16,opt,name=bcTxId" json:"bcTxId,omitempty"`
}

func (m *UTXO) Reset()                    { *m = UTXO{} }
func (m *UTXO) String() string            { return proto.CompactTextString(m) }
func (*UTXO) ProtoMessage()               {}
func (*UTXO) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *UTXO) GetSourceTxDataHash() string {
	if m != nil {
		return m.SourceTxDataHash
	}
	return ""
}

func (m *UTXO) GetIx() string {
	if m != nil {
		return m.Ix
	}
	return ""
}

func (m *UTXO) GetCTokenId() string {
	if m != nil {
		return m.CTokenId
	}
	return ""
}

func (m *UTXO) GetCType() ColorType {
	if m != nil {
		return m.CType
	}
	return ColorType_Undefined
}

func (m *UTXO) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *UTXO) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *UTXO) GetUntil() int64 {
	if m != nil {
		return m.Until
	}
	return 0
}

func (m *UTXO) GetScript() []byte {
	if m != nil {
		return m.Script
	}
	return nil
}

func (m *UTXO) GetCreatedAt() *common.TimestampWrapper {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *UTXO) GetCreatedAtNanos() int32 {
	if m != nil {
		return m.CreatedAtNanos
	}
	return 0
}

func (m *UTXO) GetSpentTxDataHash() string {
	if m != nil {
		return m.SpentTxDataHash
	}
	return ""
}

func (m *UTXO) GetSpentAt() *common.TimestampWrapper {
	if m != nil {
		return m.SpentAt
	}
	return nil
}

func (m *UTXO) GetSpentAtNanos() int32 {
	if m != nil {
		return m.SpentAtNanos
	}
	return 0
}

func (m *UTXO) GetFounder() string {
	if m != nil {
		return m.Founder
	}
	return ""
}

func (m *UTXO) GetTxType() TxType {
	if m != nil {
		return m.TxType
	}
	return TxType_ISSUE
}

func (m *UTXO) GetBcTxId() string {
	if m != nil {
		return m.BcTxId
	}
	return ""
}

// utxo tx
type TX struct {
	Version uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	// @inject_tag: gorm:"type:varchar(50)"
	Timestamp *common.TimestampWrapper `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty" gorm:"type:varchar(50)"`
	// nanoseconds of timestamp
	TimestampNanos int32    `protobuf:"varint,3,opt,name=timestampNanos" json:"timestampNanos,omitempty"`
	Txin           []*TxIN  `protobuf:"bytes,4,rep,name=txin" json:"txin,omitempty"`
	Txout          []*TxOUT `protobuf:"bytes,5,rep,name=txout" json:"txout,omitempty"`
	TxType         TxType   `protobuf:"varint,6,opt,name=txType,enum=wallet.TxType" json:"txType,omitempty"`
	Founder        string   `protobuf:"bytes,7,opt,name=founder" json:"founder,omitempty"`
}

func (m *TX) Reset()                    { *m = TX{} }
func (m *TX) String() string            { return proto.CompactTextString(m) }
func (*TX) ProtoMessage()               {}
func (*TX) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *TX) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *TX) GetTimestamp() *common.TimestampWrapper {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *TX) GetTimestampNanos() int32 {
	if m != nil {
		return m.TimestampNanos
	}
	return 0
}

func (m *TX) GetTxin() []*TxIN {
	if m != nil {
		return m.Txin
	}
	return nil
}

func (m *TX) GetTxout() []*TxOUT {
	if m != nil {
		return m.Txout
	}
	return nil
}

func (m *TX) GetTxType() TxType {
	if m != nil {
		return m.TxType
	}
	return TxType_ISSUE
}

func (m *TX) GetFounder() string {
	if m != nil {
		return m.Founder
	}
	return ""
}

// utxo txs
type TXs struct {
	Txs []*TX `protobuf:"bytes,1,rep,name=txs" json:"txs,omitempty"`
}

func (m *TXs) Reset()                    { *m = TXs{} }
func (m *TXs) String() string            { return proto.CompactTextString(m) }
func (*TXs) ProtoMessage()               {}
func (*TXs) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

func (m *TXs) GetTxs() []*TX {
	if m != nil {
		return m.Txs
	}
	return nil
}

// Single color result
type SingleColorResult struct {
	SumCurrentOutputs int64 `protobuf:"varint,1,opt,name=sumCurrentOutputs" json:"sumCurrentOutputs,omitempty"`
	SumPriorOutputs   int64 `protobuf:"varint,2,opt,name=sumPriorOutputs" json:"sumPriorOutputs,omitempty"`
}

func (m *SingleColorResult) Reset()                    { *m = SingleColorResult{} }
func (m *SingleColorResult) String() string            { return proto.CompactTextString(m) }
func (*SingleColorResult) ProtoMessage()               {}
func (*SingleColorResult) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{5} }

func (m *SingleColorResult) GetSumCurrentOutputs() int64 {
	if m != nil {
		return m.SumCurrentOutputs
	}
	return 0
}

func (m *SingleColorResult) GetSumPriorOutputs() int64 {
	if m != nil {
		return m.SumPriorOutputs
	}
	return 0
}

type QueryTxRequest struct {
	TxHashHex string `protobuf:"bytes,1,opt,name=txHashHex" json:"txHashHex,omitempty"`
}

func (m *QueryTxRequest) Reset()                    { *m = QueryTxRequest{} }
func (m *QueryTxRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryTxRequest) ProtoMessage()               {}
func (*QueryTxRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{6} }

func (m *QueryTxRequest) GetTxHashHex() string {
	if m != nil {
		return m.TxHashHex
	}
	return ""
}

type QueryUTXORequest struct {
	Addr     string                     `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	CTokenId string                     `protobuf:"bytes,2,opt,name=cTokenId" json:"cTokenId,omitempty"`
	CType    ColorType                  `protobuf:"varint,3,opt,name=cType,enum=wallet.ColorType" json:"cType,omitempty"`
	FromAddr string                     `protobuf:"bytes,4,opt,name=fromAddr" json:"fromAddr,omitempty"`
	BeginAt  *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=beginAt" json:"beginAt,omitempty"`
	EndAt    *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=endAt" json:"endAt,omitempty"`
	Num      int32                      `protobuf:"varint,7,opt,name=num" json:"num,omitempty"`
	Page     int32                      `protobuf:"varint,8,opt,name=page" json:"page,omitempty"`
}

func (m *QueryUTXORequest) Reset()                    { *m = QueryUTXORequest{} }
func (m *QueryUTXORequest) String() string            { return proto.CompactTextString(m) }
func (*QueryUTXORequest) ProtoMessage()               {}
func (*QueryUTXORequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{7} }

func (m *QueryUTXORequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *QueryUTXORequest) GetCTokenId() string {
	if m != nil {
		return m.CTokenId
	}
	return ""
}

func (m *QueryUTXORequest) GetCType() ColorType {
	if m != nil {
		return m.CType
	}
	return ColorType_Undefined
}

func (m *QueryUTXORequest) GetFromAddr() string {
	if m != nil {
		return m.FromAddr
	}
	return ""
}

func (m *QueryUTXORequest) GetBeginAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.BeginAt
	}
	return nil
}

func (m *QueryUTXORequest) GetEndAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.EndAt
	}
	return nil
}

func (m *QueryUTXORequest) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *QueryUTXORequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type QueryUTXOResponse struct {
	Utxos []*UTXO `protobuf:"bytes,1,rep,name=utxos" json:"utxos,omitempty"`
}

func (m *QueryUTXOResponse) Reset()                    { *m = QueryUTXOResponse{} }
func (m *QueryUTXOResponse) String() string            { return proto.CompactTextString(m) }
func (*QueryUTXOResponse) ProtoMessage()               {}
func (*QueryUTXOResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{8} }

func (m *QueryUTXOResponse) GetUtxos() []*UTXO {
	if m != nil {
		return m.Utxos
	}
	return nil
}

type TxScript struct {
	Version uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *TxScript) Reset()                    { *m = TxScript{} }
func (m *TxScript) String() string            { return proto.CompactTextString(m) }
func (*TxScript) ProtoMessage()               {}
func (*TxScript) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{9} }

func (m *TxScript) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *TxScript) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type ProcessTxResponse struct {
	TxID string `protobuf:"bytes,1,opt,name=txID" json:"txID,omitempty"`
}

func (m *ProcessTxResponse) Reset()                    { *m = ProcessTxResponse{} }
func (m *ProcessTxResponse) String() string            { return proto.CompactTextString(m) }
func (*ProcessTxResponse) ProtoMessage()               {}
func (*ProcessTxResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{10} }

func (m *ProcessTxResponse) GetTxID() string {
	if m != nil {
		return m.TxID
	}
	return ""
}

// UTXOSignature is used to save signature of UTXO
// PublicKey is which the utxo owned to(IPublicKey.GetRawData())
// Signature is signed the PublicKey by founder's private key
type UTXOSignature struct {
	Creator   string `protobuf:"bytes,1,opt,name=creator" json:"creator,omitempty"`
	Created   int64  `protobuf:"varint,2,opt,name=created" json:"created,omitempty"`
	Nonce     string `protobuf:"bytes,3,opt,name=nonce" json:"nonce,omitempty"`
	Signature []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	PublicKey []byte `protobuf:"bytes,5,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
}

func (m *UTXOSignature) Reset()                    { *m = UTXOSignature{} }
func (m *UTXOSignature) String() string            { return proto.CompactTextString(m) }
func (*UTXOSignature) ProtoMessage()               {}
func (*UTXOSignature) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{11} }

func (m *UTXOSignature) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *UTXOSignature) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *UTXOSignature) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *UTXOSignature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *UTXOSignature) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func init() {
	proto.RegisterType((*TxIN)(nil), "wallet.TxIN")
	proto.RegisterType((*TxOUT)(nil), "wallet.TxOUT")
	proto.RegisterType((*UTXO)(nil), "wallet.UTXO")
	proto.RegisterType((*TX)(nil), "wallet.TX")
	proto.RegisterType((*TXs)(nil), "wallet.TXs")
	proto.RegisterType((*SingleColorResult)(nil), "wallet.SingleColorResult")
	proto.RegisterType((*QueryTxRequest)(nil), "wallet.QueryTxRequest")
	proto.RegisterType((*QueryUTXORequest)(nil), "wallet.QueryUTXORequest")
	proto.RegisterType((*QueryUTXOResponse)(nil), "wallet.QueryUTXOResponse")
	proto.RegisterType((*TxScript)(nil), "wallet.TxScript")
	proto.RegisterType((*ProcessTxResponse)(nil), "wallet.ProcessTxResponse")
	proto.RegisterType((*UTXOSignature)(nil), "wallet.UTXOSignature")
	proto.RegisterEnum("wallet.ColorType", ColorType_name, ColorType_value)
	proto.RegisterEnum("wallet.TxType", TxType_name, TxType_value)
}

func init() { proto.RegisterFile("wallet/tx.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 1007 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xdd, 0x6e, 0xdb, 0x36,
	0x14, 0x9e, 0x25, 0x4b, 0x8e, 0x4f, 0x1c, 0x47, 0x21, 0x86, 0x41, 0x08, 0xba, 0xcd, 0x50, 0x81,
	0xd6, 0x08, 0x56, 0x7b, 0x73, 0x87, 0xed, 0x6e, 0x80, 0x9b, 0x68, 0xa8, 0x91, 0xd4, 0xee, 0x68,
	0xa5, 0x0b, 0x76, 0x27, 0x4b, 0x8c, 0xa3, 0xc5, 0x26, 0x35, 0x91, 0x6a, 0x95, 0x27, 0xd8, 0x13,
	0xf4, 0x6a, 0xb7, 0x7b, 0xd0, 0x81, 0xa4, 0x24, 0x3b, 0x69, 0xd2, 0xec, 0x8e, 0xdf, 0x39, 0x9f,
	0x78, 0x78, 0xbe, 0xf3, 0x63, 0xc3, 0xfe, 0x87, 0x70, 0xb5, 0x22, 0x62, 0x28, 0x8a, 0x41, 0x9a,
	0x31, 0xc1, 0x90, 0xad, 0x0d, 0x87, 0xdf, 0x2e, 0x19, 0x5b, 0xae, 0xc8, 0x50, 0x59, 0x17, 0xf9,
	0xe5, 0x50, 0x24, 0x6b, 0xc2, 0x45, 0xb8, 0x4e, 0x35, 0xf1, 0xf0, 0xeb, 0x88, 0xad, 0xd7, 0x8c,
	0x6e, 0xec, 0x1f, 0xb2, 0x30, 0x4d, 0x49, 0xa6, 0xdd, 0xde, 0x9f, 0xd0, 0x0c, 0x8a, 0xc9, 0x14,
	0x75, 0xc1, 0x48, 0x0a, 0xb7, 0xd1, 0x6b, 0xf4, 0xf7, 0xb0, 0x91, 0x14, 0xe8, 0x1b, 0x00, 0xce,
	0xf2, 0x2c, 0x22, 0xaf, 0x43, 0x7e, 0xe5, 0x1a, 0xbd, 0x46, 0xbf, 0x83, 0xb7, 0x2c, 0xe8, 0x2b,
	0xb0, 0x79, 0x94, 0x25, 0xa9, 0x70, 0x4d, 0xe5, 0x2b, 0x11, 0x3a, 0x84, 0x1d, 0x4e, 0xfe, 0xca,
	0x09, 0x8d, 0x88, 0xdb, 0x54, 0xb7, 0xd5, 0xd8, 0xfb, 0xb7, 0x01, 0x56, 0x50, 0xcc, 0xce, 0x03,
	0xc9, 0x8a, 0x02, 0x76, 0x4d, 0xe8, 0x24, 0x56, 0x31, 0xdb, 0xb8, 0xc6, 0xe8, 0x39, 0x58, 0x51,
	0x70, 0x93, 0x12, 0x15, 0xb4, 0x3b, 0x3a, 0x18, 0xe8, 0x4c, 0x07, 0xc7, 0x6c, 0xc5, 0x32, 0xe9,
	0xc0, 0xda, 0x8f, 0xbe, 0x04, 0xeb, 0x7d, 0xb8, 0xca, 0x89, 0x7a, 0x81, 0x89, 0x35, 0x40, 0x08,
	0x9a, 0x61, 0x1c, 0x67, 0x2a, 0x78, 0x1b, 0xab, 0xb3, 0x64, 0xe6, 0x54, 0x24, 0x2b, 0xd7, 0xd2,
	0x4c, 0x05, 0xb6, 0x52, 0xb0, 0xb7, 0x53, 0xf0, 0xfe, 0x69, 0x42, 0xf3, 0x3c, 0xb8, 0x98, 0xa1,
	0x23, 0x70, 0x74, 0xc6, 0x41, 0x71, 0x12, 0x8a, 0x50, 0x29, 0xa1, 0x5f, 0xfb, 0x89, 0xbd, 0xd4,
	0xcf, 0x50, 0x5e, 0xa9, 0xdf, 0x76, 0x86, 0xe6, 0x43, 0x19, 0x36, 0xff, 0x6f, 0x86, 0xd6, 0x7d,
	0x19, 0xda, 0xf7, 0x65, 0xd8, 0xba, 0x3f, 0xc3, 0x9d, 0x5b, 0x45, 0xfa, 0x09, 0xda, 0x51, 0x46,
	0x42, 0x41, 0xe2, 0xb1, 0x70, 0xdb, 0xbd, 0x46, 0x7f, 0x77, 0xe4, 0x0e, 0x74, 0x9f, 0x0c, 0x82,
	0xaa, 0x4f, 0x7e, 0xd7, 0x7d, 0x82, 0x37, 0x54, 0xf4, 0x0c, 0xba, 0x35, 0x98, 0x86, 0x94, 0x71,
	0x17, 0x7a, 0x8d, 0xbe, 0x85, 0xef, 0x58, 0x51, 0x1f, 0xf6, 0x79, 0x4a, 0xa8, 0xd8, 0xd2, 0x6d,
	0x57, 0x3d, 0xf6, 0xae, 0x19, 0x8d, 0xa0, 0xa5, 0x4c, 0x63, 0xe1, 0x76, 0x1e, 0x79, 0x47, 0x45,
	0x44, 0x1e, 0x74, 0xca, 0xa3, 0x7e, 0xc3, 0x9e, 0x7a, 0xc3, 0x2d, 0x1b, 0x72, 0xa1, 0x75, 0xc9,
	0x72, 0x1a, 0x93, 0xcc, 0xed, 0xaa, 0xc8, 0x15, 0x44, 0xcf, 0xc0, 0x16, 0x85, 0x52, 0x7f, 0x5f,
	0xa9, 0xdf, 0xad, 0xd4, 0x0f, 0x94, 0x15, 0x97, 0x5e, 0xa9, 0xdd, 0x22, 0x0a, 0x8a, 0x49, 0xec,
	0x3a, 0xea, 0x82, 0x12, 0x79, 0x7f, 0x1b, 0x60, 0x04, 0x17, 0x32, 0xc0, 0x7b, 0x92, 0xf1, 0x84,
	0xd1, 0x72, 0x68, 0x2a, 0x28, 0xc5, 0xad, 0x67, 0x4d, 0x35, 0xc4, 0x67, 0xc5, 0xad, 0xa9, 0x52,
	0xdc, 0x1a, 0xe8, 0xc4, 0x4c, 0x2d, 0xee, 0x6d, 0x2b, 0xea, 0x41, 0x53, 0x14, 0x09, 0x75, 0x9b,
	0x3d, 0xb3, 0xbf, 0x3b, 0xea, 0x6c, 0x9e, 0x3f, 0x99, 0x62, 0xe5, 0x41, 0x4f, 0xc1, 0x12, 0x05,
	0xcb, 0x85, 0x6b, 0x29, 0xca, 0xde, 0x86, 0x32, 0x3b, 0x0f, 0xb0, 0xf6, 0x6d, 0xe9, 0x60, 0x7f,
	0x56, 0x87, 0x2d, 0x25, 0x5b, 0xb7, 0x94, 0xf4, 0x9e, 0x82, 0x19, 0x5c, 0x70, 0xf4, 0x04, 0x4c,
	0x51, 0x70, 0xb7, 0xa1, 0x62, 0x41, 0x7d, 0xcb, 0x05, 0x96, 0x66, 0xef, 0x1a, 0x0e, 0xe6, 0x09,
	0x5d, 0xae, 0x88, 0x6a, 0x6e, 0x4c, 0x78, 0xbe, 0x12, 0xe8, 0x3b, 0x38, 0xe0, 0xf9, 0xfa, 0x38,
	0xcf, 0x32, 0x42, 0xc5, 0x2c, 0x17, 0x69, 0x2e, 0xb8, 0x92, 0xd1, 0xc4, 0x9f, 0x3a, 0x54, 0x37,
	0xe5, 0xeb, 0xb7, 0x59, 0xc2, 0xb2, 0x8a, 0x6b, 0x28, 0xee, 0x5d, 0xb3, 0x37, 0x80, 0xee, 0x6f,
	0x39, 0xc9, 0x6e, 0x82, 0x02, 0xcb, 0x9d, 0xc3, 0x05, 0x7a, 0x02, 0x6d, 0x51, 0xc8, 0x4e, 0x7b,
	0x4d, 0x8a, 0x72, 0x76, 0x37, 0x06, 0xef, 0xa3, 0x01, 0x8e, 0xfa, 0x40, 0x8e, 0x7b, 0xf5, 0x49,
	0x35, 0x5e, 0x8d, 0xad, 0xf1, 0xda, 0x9e, 0x66, 0xe3, 0xa1, 0x69, 0x36, 0x1f, 0x99, 0xe6, 0x43,
	0xd8, 0xb9, 0xcc, 0xd8, 0x7a, 0xbc, 0xd9, 0x4e, 0x35, 0x46, 0x3f, 0x42, 0x6b, 0x41, 0x96, 0x09,
	0x1d, 0x0b, 0x35, 0xeb, 0xbb, 0xa3, 0xc3, 0x81, 0x5e, 0xec, 0x83, 0x6a, 0xb1, 0x6f, 0x7a, 0x07,
	0x57, 0x54, 0xf4, 0x3d, 0x58, 0x84, 0xca, 0x19, 0xb6, 0x1f, 0xfd, 0x46, 0x13, 0x91, 0x03, 0x26,
	0xcd, 0xd7, 0xaa, 0x92, 0x16, 0x96, 0x47, 0x99, 0x6e, 0x1a, 0x2e, 0x89, 0xda, 0x10, 0x16, 0x56,
	0x67, 0xef, 0x67, 0x38, 0xd8, 0x92, 0x85, 0xa7, 0x8c, 0x72, 0x82, 0x3c, 0xb0, 0x72, 0x51, 0xb0,
	0xaa, 0xd2, 0x75, 0xe3, 0x29, 0x92, 0x76, 0x79, 0xbf, 0xc0, 0x4e, 0x50, 0xcc, 0xf5, 0x92, 0x79,
	0x78, 0x42, 0x5c, 0x68, 0xa5, 0xe1, 0xcd, 0x8a, 0x85, 0x71, 0xf9, 0xc3, 0x52, 0x41, 0xef, 0x39,
	0x1c, 0xbc, 0xcd, 0x58, 0x44, 0x38, 0x97, 0x25, 0x2c, 0x03, 0x23, 0xd9, 0xf0, 0x93, 0x93, 0xaa,
	0x20, 0xf2, 0xec, 0x7d, 0x6c, 0xc0, 0x9e, 0x0c, 0x3c, 0x4f, 0x96, 0x34, 0x14, 0x79, 0xa6, 0xfa,
	0x54, 0x6d, 0x21, 0x56, 0x55, 0xae, 0x82, 0xb5, 0x87, 0xc4, 0x65, 0xdf, 0x54, 0x50, 0x6e, 0x4d,
	0xca, 0xe4, 0x2f, 0x95, 0xde, 0xd0, 0x1a, 0xc8, 0x9e, 0xe1, 0xd5, 0xb5, 0xaa, 0x50, 0x1d, 0xbc,
	0x31, 0x48, 0x6f, 0x9a, 0x2f, 0x56, 0x49, 0x74, 0x4a, 0x6e, 0x54, 0xad, 0x3a, 0x78, 0x63, 0x38,
	0x1a, 0x41, 0xbb, 0xae, 0x3b, 0xda, 0x83, 0xf6, 0x39, 0x8d, 0xc9, 0x65, 0x42, 0x49, 0xec, 0x7c,
	0x81, 0x00, 0xec, 0xe3, 0x60, 0x76, 0xea, 0x4f, 0x9d, 0x86, 0x3a, 0x8f, 0xe7, 0x73, 0x3f, 0x70,
	0x8c, 0xa3, 0x04, 0x6c, 0x3d, 0x73, 0xa8, 0x0d, 0xd6, 0x64, 0x3e, 0x3f, 0xf7, 0x35, 0x79, 0x3a,
	0xc3, 0x6f, 0xc6, 0x67, 0x9a, 0x8c, 0xfd, 0x13, 0xdf, 0x7f, 0xe3, 0x18, 0xfa, 0xfc, 0x6e, 0x76,
	0xea, 0x3b, 0x26, 0xea, 0xc0, 0x0e, 0x9e, 0x9d, 0x9d, 0xbd, 0x1a, 0x1f, 0x9f, 0x3a, 0x4d, 0x89,
	0x26, 0xd3, 0xc0, 0xc7, 0xfe, 0x3c, 0x70, 0x2c, 0xd4, 0x02, 0xf3, 0x57, 0xdf, 0x77, 0x6c, 0xb4,
	0x0b, 0x2d, 0xec, 0xbf, 0xf3, 0xf1, 0xdc, 0x77, 0x5a, 0xaf, 0x5e, 0xfe, 0xf1, 0xc3, 0x32, 0x11,
	0x57, 0xf9, 0x42, 0x2e, 0xa4, 0x61, 0x98, 0x15, 0x21, 0x8d, 0xae, 0xc2, 0x84, 0x0e, 0x79, 0x7c,
	0xfd, 0x62, 0xc9, 0x5e, 0x94, 0xff, 0x15, 0x54, 0xff, 0xf0, 0xa1, 0x2e, 0xf0, 0xc2, 0x56, 0xf0,
	0xe5, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa8, 0x3b, 0x09, 0x8a, 0x84, 0x08, 0x00, 0x00,
}
